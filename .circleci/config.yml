# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

defaults: &defaults
  docker: 
      - image: circleci/node:13.8.0

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, $MY_NAME!"
  print_hello:
    <<: *defaults
    steps:
      - run:
          name: "Path of Working Directory"
          command: "pwd" 

  print_world:
    <<: *defaults
    steps:
      - run:
          name: "List"
          command: "ls -G" 
      - print_pipeline_id

  save_hello_world_output:
    <<: *defaults
    steps:
      - run:
          name: "Save th ename"
          command: echo "text to output here" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  read_hello_world_output:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Save th ename"
          command: cat ~/output.txt
      

# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  test-workspace:
    jobs:
      - save_hello_world_output
      - read_hello_world_output:
          requires:
            - save_hello_world_output
  # say-hello-workflow:
  #   jobs:
  #     - say-hello

  # welcome-workflow:
  #   # Run the welcome/run job in its own container
  #   jobs:
      # - print_hello
      # - print_world:
      #     requires:
      #       - print_hello
